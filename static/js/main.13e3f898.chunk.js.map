{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","id","title","image","category","label","price","description","className","style","recipe","Card","width","key","Img","src","Body","Title","Text","display","alignItems","justifyContent","Badge","pill","variant","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","onSubmit","e","preventDefault","type","value","onChange","target","map","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,wB,gOCoCzEC,EAjCA,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,GAAIC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC1D,OACE,yBAAKC,UAAWC,IAAMC,QACpB,kBAACC,EAAA,EAAD,CAAMF,MAAO,CAAEG,MAAO,SAAWC,IAAKZ,GACpC,kBAACU,EAAA,EAAKG,IAAN,CAAUC,IAAKZ,IACf,kBAACQ,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,CAAYT,UAAU,SAASN,GAC/B,kBAACS,EAAA,EAAKO,KAAN,KAAYX,IAEd,yBACEE,MAAO,CACLU,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGlB,4BACE,kBAACC,EAAA,EAAD,CAAOC,MAAI,EAACC,QAAQ,SAAShB,UAAU,SACpCJ,GAEH,kBAACkB,EAAA,EAAD,CAAOC,MAAI,EAACC,QAAQ,OAAOhB,UAAU,SAClCH,GAAgB,IAEnB,kBAACiB,EAAA,EAAD,CAAOC,MAAI,EAACC,QAAQ,WAApB,KACKlB,QC+BFmB,G,MAvDH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEYF,mBAAS,mCAFrB,mBAETG,EAFS,KAEDC,EAFC,OAGUJ,mBAAS,IAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAKhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,0CADZ,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,GAHM,2CAAH,qDAgBhB,OACE,yBAAK/B,UAAU,OACb,0BAAMgC,SARQ,SAACC,GACjBA,EAAEC,iBACFV,EAASH,GACTC,EAAU,KAKmBtB,UAAU,eACnC,2BACEA,UAAU,aACVmC,KAAK,OACLC,MAAOf,EACPgB,SAjBa,SAACJ,GACpBX,EAAUW,EAAEK,OAAOF,UAkBf,4BAAQpC,UAAU,gBAAgBmC,KAAK,UAAvC,WAIF,yBAAKnC,UAAU,WACZmB,EAAQoB,KAAI,SAACrC,GAAD,OACX,kBAAC,EAAD,CACET,GAAIS,EAAOT,GACXC,MAAOQ,EAAOsC,KACd7C,MAAOO,EAAOP,MACdC,SAAUM,EAAON,SACjBC,MAAOK,EAAOL,MACdC,MAAOI,EAAOJ,MACdC,YAAaG,EAAOH,qBCvCZ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.13e3f898.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"title\":\"recipe_title__1jR5P\",\"badge\":\"recipe_badge__1SqqB\"};","import React from \"react\";\nimport { Card, Badge } from \"react-bootstrap\";\nimport style from \"./recipe.module.css\";\n\nconst Recipe = ({ id, title, image, category, label, price, description }) => {\n  return (\n    <div className={style.recipe}>\n      <Card style={{ width: \"18rem\" }} key={id}>\n        <Card.Img src={image} />\n        <Card.Body>\n          <Card.Title className=\"title\">{title}</Card.Title>\n          <Card.Text>{description}</Card.Text>\n        </Card.Body>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <h4>\n            <Badge pill variant=\"danger\" className=\"badge\">\n              {category}\n            </Badge>\n            <Badge pill variant=\"info\" className=\"badge\">\n              {label ? label : \"\"}\n            </Badge>\n            <Badge pill variant=\"warning\">\n              $ {price}\n            </Badge>\n          </h4>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"Search your favourite recipe...\");\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\"http://starlord.hackerearth.com/recipe\");\n    const data = await response.json();\n    setRecipes(data);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            id={recipe.id}\n            title={recipe.name}\n            image={recipe.image}\n            category={recipe.category}\n            label={recipe.label}\n            price={recipe.price}\n            description={recipe.description}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}